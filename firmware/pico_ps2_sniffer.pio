; MIT License - okhi - Open Keylogger Hardware Implant
; ---------------------------------------------------------------------------
; Copyright (c) [2024] by David Reguera Garcia aka Dreg
; https://github.com/therealdreg/pico-ps2-sniffer
; https://www.rootkit.es
; X @therealdreg
; dreg@rootkit.es
; ---------------------------------------------------------------------------
; Permission is hereby granted, free of charge, to any person obtaining a copy
; of this software and associated documentation files (the "Software"), to deal
; in the Software without restriction, including without limitation the rights
; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
; copies of the Software, and to permit persons to whom the Software is
; furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in all
; copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
; SOFTWARE.
; ---------------------------------------------------------------------------
; WARNING: BULLSHIT CODE X-)
; ---------------------------------------------------------------------------

; Dreg's note: I have tried to document everything as best as possible and make the code and project
; as accessible as possible for beginners. There may be errors (I am a lazy bastard using COPILOT)
; if you find any, please make a PR

; I'm still a novice with the Pico SDK & RP2040, so please bear with me if there are unnecessary things ;-)

; I want to avoid mental uncertainty when solving problems and knowing where things are,
; so ALL the programs in PIO0/1 are in the same place and order in each execution.

; Ref: http://www.Computer-Engineering.org (Author: Adam Chapweske)
; The Data and Clock lines are both open collector (pullup +5v).
; Data sent from the device to the host is read on the falling edge of the clock signal;
; data sent from the host to the device is read on the rising edge.
; The clock frequency must be in the range 10 - 16.7 kHz.  This means clock must be
; high for 30 - 50 microseconds and low for 30 - 50 microseconds
; you should modify/sample the Data line in the middle of each cell.
; I.e.  15 - 25 microseconds after the appropriate clock transition.
; keyboard always generates the clock signal, but the host always has ultimate control over communication.
; Data = high, Clock = high:  Idle state.
; Data = high, Clock = low:  Communication Inhibited.
; Data = low, Clock = high:  Host Request-to-Send
; All data is transmitted one byte at a time and each byte is sent in a frame consisting of 11-12 bits.  These bits are:
; 1 start bit.  This is always 0.
; 8 data bits, least significant bit first.
; 1 parity bit (odd parity).
; 1 stop bit.  This is always 1.
; 1 acknowledge bit (host-to-device communication only)
; The clock frequency is 10-16.7 kHz.  The time from the rising edge of a clock pulse to a Data transition must be at
; least 5 microseconds.  The time from a data transition to the falling edge of a clock pulse must be at least 5 microseconds
; and no greater than 25 microseconds.
; The host may inhibit communication at any time by pulling the Clock line low for at least 100 microseconds.
; If a transmission is inhibited before the 11th clock pulse, the device must abort the current transmission and prepare
; to retransmit the current "chunk" of data when host releases Clock.  A "chunk" of data could be a make code, break code,
; device ID, mouse movement packet, etc.  For example, if a keyboard is interrupted while sending the second byte of a
; two-byte break code, it will need to retransmit both bytes of that break code, not just the one that was interrupted.
; If the host pulls clock low before the first high-to-low clock transition, or after the falling edge of the last clock pulse,
; the keyboard/mouse does not need to retransmit any data.  However, if new data is created that needs to be transmitted,
; it will have to be buffered until the host releases Clock.  Keyboards have a 16-byte buffer for this purpose.
; If more than 16 bytes worth of keystrokes occur, further keystrokes will be ignored until there's room in the buffer.
; PS/2 device always generates the clock signal.  If the host wants to send data, it must first put the Clock and Data
; lines in a "Request-to-send" state as follows:
; Inhibit communication by pulling Clock low for at least 100 microseconds.
; Apply "Request-to-send" by pulling Data low, then release Clock.
; The device should check for this state at intervals not to exceed 10 milliseconds.
; host must follow to send data to a PS/2 device:
; 1) Bring the Clock line low for at least 100 microseconds.
; 2) Bring the Data line low.
; 3) Release the Clock line.
; 4) Wait for the device to bring the Clock line low.
; 5) Set/reset the Data line to send the first data bit
; 6) Wait for the device to bring Clock high.
; 7) Wait for the device to bring Clock low.
; 8) Repeat steps 5-7 for the other seven data bits and the parity bit
; 9) Release the Data line.
; 10) Wait for the device to bring Data low.
; 11) Wait for the device to bring Clock  low.
; 12) Wait for the device to release Data and Clock


; WARNING: Do not remove lines that seem unnecessary (like mov isr, null).
; They cannot be optimized out due to potential issues with garbage values in the ISR register.
; MCU is changing PC register in any moment, so we need to avoid garbage values in the ISR register.


; ---- PIO0 AREA ---------------------------------------------------------------------

.program inhibited_signal
; PIO0_0, Must run at 1 MHz (each cycle 1 microsecond)

; Detect if CLOCK is LOW + DAT is HIGH for at least 100 microseconds

; irq0: Inhibited communication detected
; irq1: No Host Request-to-Send detected after inhibiting communication

; WARNING: two mov isr, null lines may seem optional but are essential.
; They cannot be optimized out due to potential issues with garbage values in the ISR register.
; MCU is changing PC register in any moment, so we need to avoid garbage values in the ISR register.

; FIFO_JOIN_RX: RX FIFO length: 8, TX FIFO is disabled
; IN PIN 0: DAT
; IN PIN 1: CLOCK
; JMP PIN: CLOCK
.wrap_target
await_inhibition:
    wait 1 pin 0                    ; 00 Wait until DAT goes HIGH
    jmp pin await_inhibition        ; 01 Wait until CLOCK goes LOW
    set x, 16                       ; 02 At 1 MHz, 6 instructions × 16 = 96 cycles = 96 µs
inhibition_count_loop:
    mov isr, null                   ; 03 Clear the ISR to remove any garbage
    in pins, 1                      ; 04 Read the DAT pin
    mov y, isr                      ; 05 Store the value in Y
    jmp !y, await_inhibition        ; 06 If DAT is LOW, restart
    jmp pin, await_inhibition       ; 07 If CLOCK is HIGH, restart
    jmp x--, inhibition_count_loop  ; 08 Decrement X, continue checking
    irq nowait 0                    ; 09 Trigger "Inhibited communication" IRQ0
    wait 1 pin 1                    ; 10 Wait until CLOCK goes HIGH
    mov isr, null                   ; 11 Clear the ISR again
    in pins, 1                      ; 12 Read the DAT pin
    mov y, isr                      ; 13 Store the value in Y
    jmp !y, await_inhibition        ; 14 If DAT is LOW, jump back to await_inhibition
    irq nowait 1                    ; 15 Trigger "No Host RTS" IRQ after inhibition IRQ1
.wrap                               ; Restart program

.program device_to_host
; PIO0_1, Must run ~133.6 kHz, 7.5 microseconds per cycle

; it is expected to have no fewer than 8 PIO state machine cycles for each keyboard clock cycle
; the data transition occurs when the Clock line is low

; FIFO_JOIN_RX: RX FIFO length: 8, TX FIFO is disabled
; IN PIN 0: DAT
; IN PIN 1: CLOCK
; JMP PIN: EXTERNAL PIN SIGNAL  TO WAIT START
; shift ISR to right, autopush: false, threshold: 0 bits
.wrap_target
await_start_bit:
    jmp pin await_start_bit   ; 00 Keep waiting if pin is HIGH
    mov isr, null             ; 01 Clear the ISR to remove any leftover data
    wait 0 pin 1              ; 02 Wait for CLOCK LOW (skip the start bit)
    wait 1 pin 1              ; 03 Wait for CLOCK HIGH
    set x, 7                  ; 04 Prepare to capture 8 bits
bit_capture_loop:
    wait 0 pin 1 [1]          ; 05 Wait for the falling edge of CLOCK
    in pins, 1                ; 06 Sample the DAT pin
    wait 1 pin 1              ; 07 Wait for the rising edge of CLOCK
    jmp x-- bit_capture_loop  ; 08 Decrement X, repeat until 8 bits are read
    wait 0 pin 1              ; 09 Skip parity bit (CLOCK LOW)
    wait 1 pin 1              ; 10 Skip parity bit (CLOCK HIGH)
    wait 0 pin 1              ; 11 Skip stop bit (CLOCK LOW)
    wait 1 pin 1              ; 12 Skip stop bit (CLOCK HIGH)
    jmp pin await_start_bit   ; 13 If pin is HIGH again, wait for a new start
    push                      ; 14 Push the 8 captured bits to the FIFO
.wrap                         ; Restart program



; ---- PIO1 AREA ---------------------------------------------------------------------


.program host_to_device
; PIO1_0, Must run ~133.6 kHz, 7.5 microseconds per cycle

; it is expected to have no fewer than 8 PIO state machine cycles for each keyboard clock cycle
; the data transition occurs when the Clock line is high

; FIFO_JOIN_RX: RX FIFO length: 8, TX FIFO is disabled
; IN PIN 0: DAT
; IN PIN 1: CLOCK
; JMP PIN: EXTERNAL PIN SIGNAL  TO WAIT START
; shift ISR to right, autopush: false, threshold: 0 bits
.wrap_target
await_start_signal:
    jmp pin await_start_signal ; 00 Continue waiting if pin is HIGH
    mov isr, null              ; 01 Clear the ISR to remove any leftover data
    wait 1 pin 1               ; 02 Skip the start bit (CLOCK HIGH)
    wait 0 pin 1               ; 03 Wait for CLOCK LOW
    set x, 7                   ; 04 Prepare to capture 8 bits
capture_bits:
    wait 1 pin 1 [1]           ; 05 Wait for CLOCK rising edge
    in pins, 1                 ; 06 Sample the DAT pin
    wait 0 pin 1               ; 07 Wait for CLOCK falling edge
    jmp x-- capture_bits       ; 08 Decrement X and capture all 8 bits
    wait 1 pin 1               ; 09 Skip parity and stop bits (CLOCK HIGH)
    wait 0 pin 1               ; 10 Wait for CLOCK LOW
    wait 1 pin 1               ; 11 Wait for CLOCK HIGH
    wait 0 pin 1               ; 12 Skip the ACK bit (CLOCK LOW)
    ; -------------------------------------------------------------------------
    ; IMPORTANT PS/2 PROTOCOL NOTE (for ACK bit):
    ; The ACK bit timing is different: the data transitions while CLOCK is HIGH,
    ; whereas the other 11 bits transition while CLOCK is LOW.
    ; If you need to actually sample the ACK bit, you could replace the line above
    ; with something like:
    ;    wait 0 pin 1 [1]
    ;    in pins, 1
    ; -------------------------------------------------------------------------
    jmp pin await_start_signal ; 13 If pin is HIGH again, wait for the next start
    push                       ; 14 Push the captured 8 bits to FIFO
.wrap                          ; Restart program

.program idle_signal
; PIO1_1, Must run at 1 MHz (each cycle 1 microsecond)

; Detects an IDLE state where both CLOCK and DAT remain HIGH for ≥100 µs.
; Triggers irq0 if IDLE is detected, irq1 otherwise.

; FIFO_JOIN_RX: RX FIFO length: 8, TX FIFO is disabled
; IN PIN 0: DAT
; IN PIN 1: CLOCK
; JMP PIN: CLOCK
.wrap_target
wait_for_idle:
    set x, 30                           ; 00 At 1 MHz, repeating 3 instructions × 30 = 90 cycles = 90 µs
check_idle_loop:
    mov y, !pins                        ; 01 Capture inverted DAT and CLOCK signals
    jmp !y, next_idle_check             ; 02 If DAT & CLOCK are both HIGH, continue checking
not_idle_detected:
    irq nowait 1                        ; 03 Trigger IRQ to indicate NOT IDLE, , trigger IRQ 1
    jmp wait_for_idle                   ; 04 Restart detection
next_idle_check:
    jmp x--, check_idle_loop            ; 05 Decrement X and re-check
idle_detected:
    irq nowait 0                        ; 06 IDLE detected, trigger IRQ 0
.wrap                                   ; Wrap to restart




; PIO??? AREA ---------------------------------------------------------------------



.program two_pin_mirror_reverse_inverter
; PIO???, should run at the highest possible frequency.

; This program reads two consecutive input pins (DAT on pin 0, CLOCK on pin 1),
; then outputs their inverted states on two consecutive pins in reverse order:
;   - OUT PIN 0: Inverted CLOCK
;   - OUT PIN 1: Inverted DAT
;
; Essentially:
;   1 → 0
;   0 → 1
; and the pin positions are swapped.

; IN PIN 0: DAT
; IN PIN 1: CLOCK
; OUT PIN 0: CLOCK (inverted)
; OUT PIN 1: DAT (inverted)
.wrap_target
    in pins, 2            ; 00 sample both pins
    mov y, ::isr          ; 01 store the value in Y in reverse order
    mov pins, !y          ; 02 output the inverted values
.wrap                     ; Restart the program

.program two_pin_inverter
; PIO???, should run at the highest possible frequency.

; This program reads two consecutive input pins (DAT on pin 0, CLOCK on pin 1),
; then outputs their inverted states on two consecutive pins in the same order:
;   - OUT PIN 0: Inverted DAT
;   - OUT PIN 1: Inverted CLOCK
;
; Essentially, the pin positions are mirrored, and the states are inverted.

; IN PIN 0: DAT
; IN PIN 1: CLOCK
; OUT PIN 0: DAT  (inverter)
; OUT PIN 1: CLOCK (inverter)
.wrap_target
    mov pins, !pins       ; 00 sample and output inverted values
.wrap                     ; Restart the program

.program two_pin_mirror
; PIO???, should run at the highest possible frequency.

; This program reads two consecutive input pins (DAT on pin 0, CLOCK on pin 1),
; then outputs their states on two consecutive pins in the same order:
;   - OUT PIN 0: DAT
;   - OUT PIN 1: CLOCK
;
; Essentially, the pin positions are mirrored.

; IN PIN 0: DAT
; IN PIN 1: CLOCK
; OUT PIN 0: DAT
; OUT PIN 1: CLOCK

.wrap_target
    mov pins, pins       ; 00 sample and output the same values
.wrap                     ; Restart the program

.program two_pin_reverse
; PIO???, should run at the highest possible frequency.

; This program reads two consecutive input pins (DAT on pin 0, CLOCK on pin 1),
; then outputs their states on two consecutive pins in reverse order:
;   - OUT PIN 0: CLOCK
;   - OUT PIN 1: DAT
;
; Essentially, the pin positions are swapped.

; IN PIN 0: DAT
; IN PIN 1: CLOCK
; OUT PIN 0: CLOCK
; OUT PIN 1: DAT
.wrap_target
    in pins, 2            ; 00 sample both pins
    mov pins, ::isr       ; 01 output the values in reverse order
.wrap                     ; Restart the program

.program glitch_det_fast_rise
; PIO???, Must run at 8 MHz (each instruction takes 0.125 µs).

; It detects very short pulses ("glitches") on a clock input pin, measuring
; from a falling edge to the next rising edge. Glitches of ~8 µs or shorter
; are considered detected.

;   - We need to observe a ~8 µs window, which corresponds to 64 instructions
;     at 8 MHz (64 × 0.125 µs = 8 µs).
;   - The loop uses 32 iterations, each taking 2 instructions,
;     resulting in a total of 64 instructions for the detection window.
;   - If the clock pin goes HIGH during these iterations, we register it
;     as a glitch.

;    Normal clock (no glitch):
;        ___          _________          ________
; CLOCK:    |________|         |________|        |________
;
;    With a short glitch
;        ___          __  _____          _________
; CLOCK:    |________|  ||     |________|         |________
;                         ↑
;                       short glitch (~8 µs)

; The PIO program detects this fast rise (transition to HIGH)
; happening sooner than expected, which qualifies it as a glitch.

; AUTOPUSH must be true, 32 bit threshold
; IN PIN 0: CLOCK
; JMP PIN: CLOCK
.wrap_target
init_detection:
    set x, 31                 ; 00 Initialize X for 16 loop iterations
    wait 1 pin, 0             ; 01 Ensure the CLOCK pin goes HIGH first (avoids false triggers)
    wait 0 pin, 0             ; 02 Now wait until the CLOCK pin goes LOW (start point for measuring)
check_for_glitch:
    jmp pin, glitch_detected  ; 03 If the pin transitions HIGH prematurely, it's a glitch
    jmp x--, check_for_glitch ; 04 If still LOW, repeat up to 16 times
    jmp init_detection        ; 05 No glitch detected in this window; restart
glitch_detected:
    in x, 32                  ; 06 Read the CLOCK pin to register the glitch event
.wrap                         ; Restart program

.program glitch_det_fast_fall
; PIO???, Must run at 8 MHz (each instruction takes 0.125 µs).

; The same as glitch_det_fast_rise but for detecting the opposite transition.

;    Normal clock (no glitch):
;        ___          _________          ________
; CLOCK:    |________|         |________|        |________
;
;    With a short glitch
;        ___          _________          _________
; CLOCK:    |___||___|         |________|         |________
;                ↑
;              short glitch (~8 µs)

; The PIO program detects this fast fall (transition to LOW)

; AUTOPUSH must be true, 32 bit threshold
; IN PIN 0: CLOCK
; JMP PIN: CLOCK
.wrap_target
init_detection:
    set x, 31                           ; 00 Initialize X for 16 loop iterations
    wait 0 pin, 0                       ; 01 Ensure the CLOCK pin goes LOW first (avoids false triggers)
    wait 1 pin, 0                       ; 02 Now wait until the CLOCK pin goes HIGH (start point for measuring)
check_for_glitch:
    jmp pin, no_glitch_detected         ; 03 If the pin transitions LOW prematurely, it's a glitch
glitch_detected:
    in x, 32                            ; 04 Read the CLOCK pin to register the glitch event
    jmp init_detection                  ; 05 Restart detection
no_glitch_detected:
    jmp x--, check_for_glitch           ; 06 If still HIGH, repeat up to 16 times
.wrap                                   ; Restart program